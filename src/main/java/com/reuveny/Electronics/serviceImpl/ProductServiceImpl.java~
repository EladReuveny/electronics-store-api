/**
 * @package Electronics
 * @author Elad Reuveny
 *
 * Implementation of ProductService to manage product-related operations.
 */
package com.reuveny.Electronics.serviceImpl;

import com.reuveny.Electronics.dto.ProductUpdateDto;
import com.reuveny.Electronics.exception.IllegalRequestException;
import com.reuveny.Electronics.exception.ResourceNotFoundException;
import com.reuveny.Electronics.model.Category;
import com.reuveny.Electronics.model.Product;
import com.reuveny.Electronics.repository.ProductRepository;
import com.reuveny.Electronics.repository.WishListRepository;
import com.reuveny.Electronics.service.ProductService;
import jakarta.transaction.Transactional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class ProductServiceImpl implements ProductService {
    @Autowired
    private ProductRepository productRepository;

    @Autowired
    private WishListRepository wishListRepository;

    @Override
    public Product getProductById(Long productId) throws IllegalArgumentException {
        return productRepository.findById(productId)
                                .orElseThrow(() -> new ResourceNotFoundException(
                                        "Product " + productId + " hasn't been found."));
    }

    @Override
    public List<Product> getAllProducts() {
        return productRepository.findAll();
    }

    @Override
    public List<Product> searchProductsByName(String name) {
        return productRepository.findByNameIgnoreCaseContaining(name);
    }

    @Override
    public List<Product> getProductsByCategory(Category category) {
        return productRepository.findProductsByCategory(category);
    }

    @Override
    public Product addProduct(Product product) {
        if (product.getPrice() < 0) {
            throw new IllegalRequestException("Price has to be a positive value.");
        } else if (product.getStockQuantity() < 0) {
            throw new IllegalRequestException("Stock quantity has to be a positive value.");
        }
        return productRepository.save(product);
    }

    @Override
    @Transactional
    public Product updateProduct(Long productId, ProductUpdateDto productUpdateDTO) {
        return productRepository.findById(productId)
                                .map(existingProduct -> {
                                    if (productUpdateDTO.getName() != null &&
                                        !productUpdateDTO.getName()
                                                         .isBlank()) {
                                        existingProduct.setName(productUpdateDTO.getName());
                                    }
                                    if (productUpdateDTO.getDescription() != null) {
                                        existingProduct.setDescription(
                                                productUpdateDTO.getDescription());
                                    }
                                    if (productUpdateDTO.getPrice() != null) {
                                        if (productUpdateDTO.getPrice() < 0) {
                                            throw new IllegalRequestException(
                                                    "Price has to be a positive value.");
                                        }
                                        existingProduct.setPrice(productUpdateDTO.getPrice());
                                    }
                                    if (productUpdateDTO.getImgUrl() != null &&
                                        !productUpdateDTO.getImgUrl()
                                                         .isBlank()) {
                                        existingProduct.setImgUrl(productUpdateDTO.getImgUrl());
                                    }
                                    if (productUpdateDTO.getStockQuantity() != null) {
                                        if (productUpdateDTO.getStockQuantity() < 0) {
                                            throw new IllegalRequestException(
                                                    "Stock quantity has to be a positive value.");
                                        }
                                        existingProduct.setStockQuantity(
                                                productUpdateDTO.getStockQuantity());
                                    }
                                    if (productUpdateDTO.getCategory() != null) {
                                        existingProduct.setCategory(productUpdateDTO.getCategory());
                                    }
                                    return productRepository.save(existingProduct);
                                })
                                .orElseThrow(() -> new ResourceNotFoundException(
                                        "Product " + productId + " hasn't been found"));
    }

    @Override
    public void deleteProduct(Long productId) {
        productRepository.deleteById(productId);
    }

    @Override
    @Transactional
    public void removeSelectedProducts(List<Long> productIds) {
        productRepository.removeProductReferences(productIds);
        productRepository.deleteAllById(productIds);
    }
}